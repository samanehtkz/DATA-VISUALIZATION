# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-gfVhmwWxvsKQemOTZSZBkTD1_9dHpw1
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.express as px
import colorsys

st.set_page_config(layout="wide")

st.title('Sales Analysis Dashboard')


menu = ['Home', 'About']
choice = st.sidebar.selectbox('Menu', menu)


if choice == 'Home':
    st.write("""

    Welcome to the Sales Analysis Dashboard. this is part of **SU23: DATA VISUALIZATION: 10911** course requirement. This application is designed to provide a dynamic and interactive data analysis of your sales data. You can upload your own CSV file and select from various analysis types including Overview, Branch Analysis, Product Line Analysis, and Payment Method Analysis. 

    This application is a work in progress, and more features and functionalities will be added over time to provide more in-depth and comprehensive analysis. 

    Please note that this application assumes your CSV data is in a specific format with required columns named as 'Branch', 'Customer type', 'Payment', 'Product line', and 'Total'. If your CSV file does not follow this format, the analysis may not work as expected. 

    Have fun exploring your data!
    """)

    
    st.write(f'Please upload or drag and drop your csv file.')
    csv_file = st.file_uploader('Upload File - Overview')
    if csv_file:
        df = pd.read_csv(csv_file)
        
    
        analysis_type = st.selectbox('Select Analysis Type', ['Overview', 'Pairplot', 'Branch Analysis', 'Product Line Analysis', 'Payment Method Analysis', 'Shopping Time Analysis'])

        if analysis_type == 'Overview':

            st.subheader('Home - Overview')
            st.write('The "Overview" section provides a comprehensive summary of your data, focusing on key elements such as Branch, Customer Type, and Payment Method. The section starts with a horizontal bar chart for each element. The bar chart for "Branch" shows the distribution of sales across different branches, "Customer Type" provides a count distribution of different customer types, and "Payment Method" depicts the counts of various payment methods used.This is followed by a pie chart representation of the same data, providing a percentage view of the distribution. These visualizations give you a quick understanding of your sales distribution and customer preferences in terms of payment methods.')

            # Create a subplot grid for the plots
            fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(20, 6))
            branch_dist = df['Branch'].value_counts()
            customer_type_dist = df['Customer type'].value_counts()
            payment_method_dist = df['Payment'].value_counts()
            
            # Define some colors
            branch_colors = ["#1f77b4", "#ff7f0e", "#2ca02c"]
            customer_type_colors = ["#1f77b4", "#ff7f0e"]
            payment_method_colors = ["#1f77b4", "#ff7f0e", "#2ca02c"]

            # Set the titles of the plots
            # Plot the distributions
            sns.barplot(x=branch_dist.index, y=branch_dist.values, ax=ax[0])
            ax[0].set_title("Sales Distribution Across Branches")
            ax[0].set_xlabel("Branch")
            ax[0].set_ylabel("Sales")

            sns.barplot(x=customer_type_dist.index, y=customer_type_dist.values, ax=ax[1])
            ax[1].set_title("Distribution of Customer Types")
            ax[1].set_xlabel("Customer Type")
            ax[1].set_ylabel("Count")

            sns.barplot(x=payment_method_dist.index, y=payment_method_dist.values, ax=ax[2])
            ax[2].set_title("Distribution of Payment Methods")
            ax[2].set_xlabel("Payment Method")
            ax[2].set_ylabel("Count")

            # Use tight layout to avoid overlap
            plt.tight_layout()

            # Display the plot
            st.pyplot(fig)

            # Create a subplot grid for the plots
            fig2, ax = plt.subplots(nrows=1, ncols=3, figsize=(20, 6))

            # Plot the distributions
            ax[0].pie(branch_dist.values, labels=branch_dist.index, autopct='%1.1f%%', startangle=140, colors=branch_colors)
            ax[0].set_title("Sales Distribution Across Branches")
            
            ax[1].pie(customer_type_dist.values, labels=customer_type_dist.index, autopct='%1.1f%%', startangle=140, colors=customer_type_colors)
            ax[1].set_title("Distribution of Customer Types")

            ax[2].pie(payment_method_dist.values, labels=payment_method_dist.index, autopct='%1.1f%%', startangle=140, colors=payment_method_colors)
            ax[2].set_title("Distribution of Payment Methods")

            # Use tight layout to avoid overlap
            plt.tight_layout()

            # Display the plot
            st.pyplot(fig2)

            sns.pairplot(df)

        if analysis_type == ('Pairplot'):
            st.subheader('A scatter plot for each pair' )
            st.write('''
            The 'Pairplot' section offers a detailed scatter plot matrix for each pair of 'Unit Price', 'Quantity', and 'Total' variables. Each point on the scatter plot is color-coded based on its 'Total' category, which is divided into 'Low', 'Medium', and 'High' sales categories. This scatter plot matrix allows you to see relationships between pairs of these three variables, with the ability to filter data based on a specific branch or all branches.
            
            This section also includes an interactive scatter plot matrix developed in Altair. This interactive chart provides a similar view of the relationship between pairs of variables but with added interactivity like selection and zooming. This chart is a powerful tool to study intricate relationships and detect any patterns or anomalies in your data.
            ''')

            df['Total Category'] = pd.cut(df['Total'], bins=[0, 100, 200, float('inf')], labels=['Low', 'Medium', 'High'])
            
            # Allowing the user to select a branch or 'All Branches'
            branch_to_show = st.selectbox('Select a Branch', ['All Branches'] + list(df['Branch'].unique()))
            
            # Filter data based on the selected branch
            if branch_to_show != 'All Branches':
                data_to_show = df[df['Branch'] == branch_to_show]
            else:
                data_to_show = df

            plt.figure(figsize=(20,10))
            
            # Only showing columns 'Unit price', 'Quantity', and 'Total' in the pairplot
            sns.pairplot(data_to_show[['Unit price', 'Quantity', 'Total', 'Total Category']], hue='Total Category')
            
            st.pyplot(plt)

            st.write('\n\n')
            st.write('\n\n')
            st.write('\n\n')
            st.write('\n\n')
            st.write('\n\n')
            st.write('\n\n')
            st.write('\n\n')

            st.subheader('Interactive scatterplot matrix in altair')

            # Create the Altair scatterplot matrix
            brush = alt.selection_interval()
            scatter = alt.Chart().mark_circle().encode(
                alt.X(alt.repeat("column"), type='quantitative'),
                alt.Y(alt.repeat("row"), type='quantitative'),
                color=alt.condition(brush, 'Total Category', alt.value('lightgray')),
                opacity=alt.value(0.1)  # Set opacity to 0.2
            ).properties(
                width=200,
                height=150
            ).add_selection(
                brush
            )

            matrix = alt.layer(scatter, data=data_to_show).repeat(
                row=['Unit price', 'Quantity', 'Total'],
                column=['Unit price', 'Quantity', 'Total']
            )

            st.altair_chart(matrix)


        if analysis_type == 'Branch Analysis':
            st.subheader('Branch Analysis')
            st.write('This" Branch Analysis" section provides an interactive visualization of average sales per product line, divided by branch and gender. You can select your preferred branch and gender to view the respective data. The chart offers an intuitive comparison tool that sheds light on sales performance across different branches, product lines, and genders, aiding effective business decision-making.')
            
            # Allow selecting multiple branches and genders
            branches = st.multiselect('Select Branch(es)', df['Branch'].unique(), default=df['Branch'].unique())
            genders = st.multiselect('Select Gender(s)', df['Gender'].unique(), default=df['Gender'].unique())
            
            # Filter data based on selected branches and genders
            data = df[df['Branch'].isin(branches) & df['Gender'].isin(genders)]

            # Allow selecting visualization type
            vis_type = st.selectbox('Select Visualization Type', ['Bar Chart', 'Heatmap'])
  
            
            if not data.empty:
                
                # Calculate the mean total for each product line
                product_line_means = data.groupby(['Product line', 'Branch', 'Gender'])['Total'].mean().reset_index()
                
            if vis_type == 'Bar Chart':
                # Use Altair for interactive bar chart
                chart = alt.Chart(product_line_means).mark_bar().encode(
                    x=alt.X('Product line:N', axis=alt.Axis(labelAngle=-45)),
                    y='Total',
                    color=alt.Color('Branch', scale=alt.Scale(scheme='pastel1')),  # Color bars by branch
                    row='Gender',  # Separate charts for each gender
                    tooltip=['Product line', 'Total', 'Branch', 'Gender']  # Show these values on hover
                ).properties(
                        width=600,  # adjust the width as per your needs
                        height=300  # adjust the height of each subplot as per your needs
                    ).interactive()
                
                st.altair_chart(chart)
            
            elif vis_type == 'Heatmap':
                # Use Altair for interactive heatmap
                heatmap = alt.Chart(product_line_means).mark_rect().encode(
                        x=alt.X('Product line:N', axis=alt.Axis(labelAngle=-45)),
                        y='Branch:N',
                        color=alt.Color('Total:Q', scale=alt.Scale(scheme='reds')),  # Color bars by Total 
                        row='Gender:N',
                        tooltip=['Product line', 'Total', 'Branch', 'Gender']  # Show these values on hover
                    ).properties(
                        width=600,  # adjust the width as per your needs
                        height=300  # adjust the height of each subplot as per your needs
                    )
                
                st.altair_chart(heatmap)
            else:
                st.write("No data available for this selection.")
                

        if analysis_type == 'Product Line Analysis':
            st.subheader('Product Line Analysis')
            st.write('This section provides an interactive visualization of average sales per branch for selected product lines. You can select multiple product lines for a comparative view. Further filter the data based on gender, customer type, or payment type to get insights specific to your selection. This feature is a powerful tool for understanding sales performance across different product lines and demographics.')

            # Allow multi-selection for product line
            product_lines = st.multiselect('Select Product Line(s)', df['Product line'].unique(), default=df['Product line'].unique())

            # Additional filters
            customer_types = st.multiselect('Select Customer Type(s)', df['Customer type'].unique(), default=df['Customer type'].unique())

            # Filter data based on selections
            data = df[df['Product line'].isin(product_lines) & (df['Customer type'].isin(customer_types))]

            if not data.empty:
                      
                # Calculate the mean total for each product line and branch
                product_line_means = data.groupby(['Product line', 'Branch'])['Total'].mean().reset_index()

                # Use Altair for interactive visualization
                chart = alt.Chart(product_line_means).mark_bar().encode(
                    x='Branch:N',
                    y='Total:Q',
                    color='Product line:N'                      
                ).interactive()

                st.altair_chart(chart, use_container_width=True)
            else:
                st.write("No data available for this selection.")

        if analysis_type == 'Payment Method Analysis':
            st.subheader('Payment Method Analysis')
            st.write('This section enables you to understand customer preferences for different payment methods across various branches. The interactive pie chart shows average sales for the selected payment method across different branches. In addition, a static bar chart provides an overall view of the customer preferences for different payment methods across all branches.')
            
            # Interactive Pie chart based on selected payment method
            payment = st.selectbox('Select a Payment Method', df['Payment'].unique())
            data = df[df['Payment'] == payment]

            if not data.empty:
                pie_chart_data = data.groupby('Branch')['Total'].mean().reset_index()

                pie_chart = px.pie(pie_chart_data, values='Total', names='Branch', title='Average Sales by Branch for selected Payment Method', color_discrete_sequence=px.colors.sequential.Cividis)
                st.write('Interactive Pie Chart')
                st.plotly_chart(pie_chart)
            else:
                st.write("No data available for this selection.")

            # Static Bar chart showing overall preferences for payment methods across all branches
            st.write('Static Bar Chart')
            total_payment_data = df.groupby('Payment')['Total'].mean().reset_index()

            if not total_payment_data.empty:
                bar_chart = px.bar(total_payment_data, x='Payment', y='Total', color='Payment', color_discrete_sequence=px.colors.qualitative.Pastel, labels={'Total':'Average Sales', 'Payment':'Payment Method'}, title='Overall Payment Preferences Across All Branches')
                st.plotly_chart(bar_chart)
            else:
                st.write("No data available for overall payment methods.")

        if analysis_type == 'Shopping Time Analysis':

            st.write('The Sales by Time of Day line plot, included in the sales dashboard, demonstrates total sales per hour, helping identify peak sales times. This involves converting the "Time" column into datetime format, extracting the hour, and calculating total sales per hour. The data is presented in a line plot, allowing easy trend and pattern identification, including peak sales hours. The plot is styled for readability and appeal, with appropriate plot size, linewidth, and customized labels and titles. A grid enhances data point reference. This plot helps businesses enhance operational efficiency and customer satisfaction by allocating resources according to peak sales hours.')

            # First, convert the 'Time' column to datetime format and extract the hour
            df['Time'] = pd.to_datetime(df['Time']).dt.hour

            # Calculate the total sales for each time period
            sales_by_time = df.groupby('Time')['Total'].sum().reset_index()

            # Set theme
            sns.set_style('whitegrid')

            # Create figure and axes
            fig, ax = plt.subplots(figsize=(12, 8))

            # Create lineplot
            sns.lineplot(x='Time', y='Total', data=sales_by_time, ax=ax, linewidth=2.5)

            # Set title and labels
            ax.set_title('Sales by Time of Day', fontsize=20, fontweight='bold')
            ax.set_xlabel('Time (Hour)', fontsize=15)
            ax.set_ylabel('Total Sales', fontsize=15)

            # Change tick parameters
            ax.tick_params(axis='both', which='major', labelsize=12)

            # Add a grid
            ax.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)

            # Display the plot in Streamlit
            st.pyplot(fig)







elif choice == 'About':
    st.subheader('About Us')
    st.write('This is a data analysis project for **SU23: DATA VISUALIZATION: 10911** course.')

    st.write('Samaneh Torkzadeh')
    st.write('Currently a grad student at IU Bloomington focusing on Data Science. This program taught me what data can do in many fields and how important it is to the modern world. This web app shows you a sneek peek of its powerful techniques.')
